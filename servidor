#!/usr/bin/env python3
import asyncio
from grader.tcp import Servidor, Conexao
import re

mensagens: list[bytes] = []
conexaoToNick: dict[Conexao, bytes] = {}
nickToConexao: dict[bytes, Conexao] = {}
canais: dict[bytes, list[Conexao]]= {}


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None

def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao: Conexao, dados: bytes):
    global mensagens
    global conexaoToNick
    global nickToConexao
    
    if dados == b'':
        return sair(conexao)
    
    print(dados)
    if not mensagens or not mensagens[-1]:
        mensagens = dados.split(b'\r\n')
    else:
        temp = mensagens[-1] + dados
        mensagens = temp.split(b'\r\n')

    
    
    for i, mensagem in enumerate(mensagens):
        if i >= len(mensagens)-1:
            break
        
        print(mensagem)
        
        if mensagem.startswith(b'PING'):
            ping(conexao, mensagem)   
        elif mensagem.startswith(b'NICK'):
            nick(conexao, mensagem)
        elif mensagem.startswith(b'PRIVMSG'):
            privmsg(conexao, mensagem)
        elif mensagem.startswith(b'JOIN'):
            join(conexao, mensagem)
            # print(canais)

   

def ping(conexao, mensagem):
    resposta = b":server PONG server :%s\r\n" % mensagem.removeprefix(b"PING ")       
    conexao.enviar(resposta)

def nick(conexao, mensagem):
    global conexaoToNick
    global nickToConexao

    nome = mensagem.removeprefix(b"NICK ")

    if conexao not in conexaoToNick.keys():
        conexaoToNick[conexao] = b'*'

    if validar_nome(nome):

        if nome.lower() in conexaoToNick.values(): 
            resposta = b':server 433 %s %s :Nickname is already in use\r\n' % (conexaoToNick[conexao], nome)
            print(mensagem, resposta, nome)
            conexao.enviar(resposta)
        else:
            if conexaoToNick[conexao] == b'*':
                conexao.enviar(b':server 001 %s :Welcome\r\n' % nome)
                conexao.enviar(b':server 422 %s :MOTD File is missing\r\n' % nome)
            else:
                conexao.enviar(b":%s NICK %s\r\n" % (conexaoToNick[conexao], nome))
                nickToConexao.pop(conexaoToNick[conexao])

            conexaoToNick[conexao] = nome.lower()
            nickToConexao[nome.lower()] = conexao
    else:
        resposta = b':server 432 %s %s :Erroneous nickname\r\n' % (conexaoToNick[conexao], nome)
        print(mensagem, resposta, nome)
        conexao.enviar(resposta)

def privmsg(conexao, mensagem):
    global conexaoToNick
    global nickToConexao

    _, nickEnvio, msg = mensagem.split(b' ', 2)
    try:
        if not nickEnvio.startswith(b"#"):
            resposta = b':%s PRIVMSG %s %s\r\n' % (conexaoToNick[conexao], nickEnvio.lower(), msg)
            print(f'{resposta=}')
                
            nickToConexao[nickEnvio.lower()].enviar(resposta)
        else:
            resposta = b':%s PRIVMSG %s %s\r\n' % (conexaoToNick[conexao], nickEnvio.lower(), msg)
           
            for con in canais[nickEnvio.lower()]:
                if con is not conexao:
                    con.enviar(resposta) 
    except KeyError:
        print(f'{nickEnvio} não encontrado')


def join(conexao: Conexao, mensagem: bytes):
    global conexaoToNick
    global nickToConexao
    global canais
    
    nomeCanal = mensagem.removeprefix(b"JOIN ").lower()
    if nomeCanal not in canais:
        canais[nomeCanal] = list()
    canais[nomeCanal].append(conexao)

    resposta = b':%s JOIN :%s\r\n' % (conexaoToNick[conexao], nomeCanal)
    conexao.enviar(resposta)

    

def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
