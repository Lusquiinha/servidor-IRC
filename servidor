#!/usr/bin/env python3
import asyncio
from grader.tcp import Servidor, Conexao
import re

mensagens = []
nicknames = {}


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None

def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao: Conexao, dados: bytes):
    global mensagens
    global nicknames
    
    if dados == b'':
        return sair(conexao)
    
    if not mensagens or not mensagens[-1]:
        mensagens = dados.split(b'\r\n')
    else:
        temp = mensagens[-1] + dados
        mensagens = temp.split(b'\r\n')

    
    
    for i, mensagem in enumerate(mensagens):
        if i >= len(mensagens)-1:
            break
        
        if b'PING' in mensagem:
            
            resposta = b":server PONG server :%s\r\n" % mensagem.split(b" ",1)[1]
            
            print(dados, resposta)
            conexao.enviar(resposta)

        if b'NICK' in mensagem:
            nome = mensagem.split(b' ', 1)[1]
            print(mensagem)

            if conexao not in nicknames.keys():
                nicknames[conexao] = b'*'

            if validar_nome(nome):

                if nome.lower() in nicknames.values(): 
                    resposta = b':server 433 %s %s :Nickname is already in use\r\n' % (nicknames[conexao], nome)
                    print(mensagem, resposta, nome)
                    conexao.enviar(resposta)
                else:
                    if nicknames[conexao] == b'*':
                        conexao.enviar(b':server 001 %s :Welcome\r\n' % nome)
                        conexao.enviar(b':server 422 %s :MOTD File is missing\r\n' % nome)
                    else:
                        conexao.enviar(b":%s NICK %s\r\n" % (nicknames[conexao], nome))

                    nicknames[conexao] = nome.lower()
            else:
                resposta = b':server 432 %s %s :Erroneous nickname\r\n' % (nicknames[conexao], nome)
                print(mensagem, resposta, nome)
                conexao.enviar(resposta)


    # print("aqui1")
    # print(conexao, dados)
    # print("aqui2")

def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
